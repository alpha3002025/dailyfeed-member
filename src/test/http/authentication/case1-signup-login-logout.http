### Authentication Controller E2E Tests
### Base URL and Environment Variables
@baseUrl = {{baseUrl}}
@apiPath = /api/authentication

###############################################################################
### 1. 회원가입 테스트 (Signup Tests)
###############################################################################

### 1-1. 정상 회원가입
POST {{baseUrl}}{{apiPath}}/signup
Content-Type: application/json

{
  "email": "case3_P@example.com",
  "password": "Password123!",
  "memberName": "테스트 사용자",
  "handle": "testuser123",
  "displayName": "Test User",
  "bio": "안녕하세요, 테스트 사용자입니다.",
  "location": "Seoul, Korea",
  "websiteUrl": "https://example.com",
  "birthDate": "1990-01-01",
  "gender": "MALE",
  "timezone": "Asia/Seoul",
  "languageCode": "ko",
  "countryCode": "KR",
  "privacyLevel": "PUBLIC",
  "isActive": true
}


###############################################################################
### 2. 로그인 테스트 (Login Tests)
###############################################################################

### 2-1. 정상 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "email": "case3@example.com",
  "password": "Password123!"
}

> {%
// 로그인 응답 확인
client.log("Login Response Status: " + response.status);

// 토큰 저장
try {
    var token = null;

    // Authorization 헤더에서 토큰 확인 (메인 소스)
    var authHeader = response.headers.valueOf("Authorization");
    if (authHeader && authHeader.startsWith("Bearer ")) {
        token = authHeader.substring(7);
        client.log("✓ Found token in Authorization header");
    }

    // 토큰 저장
    if (token) {
        client.global.set("accessToken", token);
        client.log("✓ Access Token saved: " + token);

        // 디버깅: 저장된 토큰 확인
        var savedToken = client.global.get("accessToken");
        client.log("✓ Verified saved token: " + (savedToken ? "OK" : "Failed"));
    } else {
        client.log("✗ No access token found in Authorization header");

        // 모든 헤더 출력 (디버깅용)
        client.log("Available headers: " + response.headers.valuesOf().join(", "));
    }

    // 응답 상태 확인
    if (response.body) {
        client.log("Login status: ok=" + response.body.ok + ", reason=" + response.body.reason);
    }
} catch (e) {
    client.log("Error: " + e.message);
}

// 테스트
client.test("Login successful", function() {
    client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.ok === "Y", "Login OK status is Y");
});

client.test("Token received", function() {
    var savedToken = client.global.get("accessToken");
    client.assert(savedToken !== null && savedToken !== undefined, "Token received and saved");
});
%}


###############################################################################
### 3. JWT 기반 로그아웃 테스트 (JWT Logout Tests)
###############################################################################
### 3-1. 현재 디바이스에서 로그아웃 (accessToken 자동 사용)
# 로그인 후 받은 JWT 토큰을 사용합니다.
# 먼저 2-1 로그인을 실행한 후 이 요청을 실행하세요.
POST {{baseUrl}}{{apiPath}}/logout
Authorization: Bearer {{accessToken}}

> {%
// 로그아웃 응답 확인
client.log("Logout Response Status: " + response.status);

// 저장된 토큰 확인
var savedToken = client.global.get("accessToken");
client.log("Saved token exists: " + (savedToken ? "Yes" : "No"));
if (savedToken) {
    client.log("Token being used (first 30 chars): " + savedToken.substring(0, Math.min(30, savedToken.length)) + "...");
}

// 응답 확인
if (response.body) {
    client.log("Response: " + JSON.stringify(response.body));
}
%}

### 3-2. 모든 디바이스에서 로그아웃
# 모든 디바이스의 토큰을 무효화합니다.
POST {{baseUrl}}{{apiPath}}/logout-all
Authorization: Bearer {{accessToken}}

### 3-3. 로그아웃 테스트 (토큰 직접 입력)
# 로그인 후 받은 토큰을 직접 입력하여 테스트
# Authorization 헤더의 토큰 값을 로그인 응답에서 복사하여 붙여넣으세요
POST {{baseUrl}}{{apiPath}}/logout
Authorization: Bearer eyJraWQiOiIwOWRhZWJlYi0zOGI4LTRlNDUtOWQ0Zi1mMTYyZWNmOTJkOGYiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI3NmUyN2VjNi1lYjVmLTQ5YWEtYjRmNi1mZDJiZDA4MjU5Y2YiLCJzdWIiOiJjYXNlM0BleGFtcGxlLmNvbSIsImV4cCI6MTc1Nzk5NDA3MCwiaWQiOjMsImVtYWlsIjoiY2FzZTNAZXhhbXBsZS5jb20iLCJwYXNzd29yZCI6IiQyYSQxMCRNdTIvalI0dUNJbHZWMVFvZ2tZWWR1NThDVG85ZW1qaFBJU0loVm41VTROVmlQR29HSmFBVyJ9.dcGweAv0sSupzu2xKdpEkR1QSgFdxMusH1fv3OY9dnQ

