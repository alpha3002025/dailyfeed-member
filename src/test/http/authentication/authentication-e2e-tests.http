### Authentication Controller E2E Tests
### Base URL and Environment Variables
@baseUrl = {{baseUrl}}
@apiPath = /api/authentication

###############################################################################
### 1. 회원가입 테스트 (Signup Tests)
###############################################################################

### 1-1. 정상 회원가입
POST {{baseUrl}}{{apiPath}}/signup
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "Password123!",
  "memberName": "테스트 사용자",
  "handle": "testuser123",
  "displayName": "Test User",
  "bio": "안녕하세요, 테스트 사용자입니다.",
  "location": "Seoul, Korea",
  "websiteUrl": "https://example.com",
  "birthDate": "1990-01-01",
  "gender": "MALE",
  "timezone": "Asia/Seoul",
  "languageCode": "ko",
  "countryCode": "KR",
  "privacyLevel": "PUBLIC",
  "isActive": true,
  "avatarUrl": "https://example.com/avatar.jpg",
  "coverUrl": "https://example.com/cover.jpg"
}

### 1-2. 필수 필드 누락 테스트 (이메일 누락)
POST {{baseUrl}}{{apiPath}}/signup
Content-Type: application/json

{
  "password": "Password123!",
  "memberName": "테스트 사용자",
  "handle": "testuser123",
  "birthDate": "1990-01-01",
  "gender": "MALE",
  "countryCode": "KR"
}

### 1-3. 잘못된 이메일 형식 테스트
POST {{baseUrl}}{{apiPath}}/signup
Content-Type: application/json

{
  "email": "invalid-email",
  "password": "Password123!",
  "memberName": "테스트 사용자",
  "handle": "testuser123",
  "birthDate": "1990-01-01",
  "gender": "MALE",
  "countryCode": "KR"
}

### 1-4. 약한 비밀번호 테스트
POST {{baseUrl}}{{apiPath}}/signup
Content-Type: application/json

{
  "email": "test2@example.com",
  "password": "123456",
  "memberName": "테스트 사용자",
  "handle": "testuser456",
  "birthDate": "1990-01-01",
  "gender": "MALE",
  "countryCode": "KR"
}

### 1-5. 잘못된 핸들 형식 테스트 (특수문자 포함)
POST {{baseUrl}}{{apiPath}}/signup
Content-Type: application/json

{
  "email": "test3@example.com",
  "password": "Password123!",
  "memberName": "테스트 사용자",
  "handle": "test-user@123",
  "birthDate": "1990-01-01",
  "gender": "MALE",
  "countryCode": "KR"
}

### 1-6. 너무 긴 필드값 테스트
POST {{baseUrl}}{{apiPath}}/signup
Content-Type: application/json

{
  "email": "test4@example.com",
  "password": "Password123!",
  "memberName": "이것은아주아주아주아주아주아주긴이름입니다아주긴이름이것은아주아주아주아주아주아주긴이름입니다아주긴이름이것은아주아주아주아주아주아주긴이름입니다아주긴이름이것은아주아주아주아주아주아주긴이름입니다아주긴이름이것은아주아주아주아주아주아주긴이름입니다아주긴이름이것은아주아주아주아주아주아주긴이름입니다아주긴이름",
  "handle": "testuser789",
  "birthDate": "1990-01-01",
  "gender": "MALE",
  "countryCode": "KR"
}

### 1-7. 미래 생년월일 테스트
POST {{baseUrl}}{{apiPath}}/signup
Content-Type: application/json

{
  "email": "test5@example.com",
  "password": "Password123!",
  "memberName": "테스트 사용자",
  "handle": "testuser999",
  "birthDate": "2030-01-01",
  "gender": "MALE",
  "countryCode": "KR"
}

### 1-8. 잘못된 URL 형식 테스트
POST {{baseUrl}}{{apiPath}}/signup
Content-Type: application/json

{
  "email": "test6@example.com",
  "password": "Password123!",
  "memberName": "테스트 사용자",
  "handle": "testuser111",
  "websiteUrl": "not-a-valid-url",
  "avatarUrl": "invalid-avatar-url",
  "birthDate": "1990-01-01",
  "gender": "MALE",
  "countryCode": "KR"
}

###############################################################################
### 2. 로그인 테스트 (Login Tests)
###############################################################################

### 2-1. 정상 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "Password123!"
}

### 2-2. 잘못된 이메일로 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "email": "wrong@example.com",
  "password": "Password123!"
}

### 2-3. 잘못된 비밀번호로 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "WrongPassword!"
}

### 2-4. 이메일 누락 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "password": "Password123!"
}

### 2-5. 비밀번호 누락 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "email": "test@example.com"
}

### 2-6. 빈 문자열로 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "email": "",
  "password": ""
}

### 2-7. 공백만 있는 필드로 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "email": "   ",
  "password": "   "
}

### 2-8. 잘못된 이메일 형식으로 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "email": "invalid-email-format",
  "password": "Password123!"
}

###############################################################################
### 3. JWT 기반 로그아웃 테스트 (JWT Logout Tests)
###############################################################################

### 3-1. 정상 로그아웃 (Bearer Token 사용)
# 실제 사용시 login 응답에서 받은 accessToken을 사용하세요
POST {{baseUrl}}{{apiPath}}/logout
Authorization: Bearer {{accessToken}}

### 3-2. Authorization 헤더 없이 로그아웃
POST {{baseUrl}}{{apiPath}}/logout

### 3-3. 잘못된 형식의 토큰으로 로그아웃
POST {{baseUrl}}{{apiPath}}/logout
Authorization: Bearer invalid-jwt-token

### 3-4. Bearer 키워드 없이 로그아웃
POST {{baseUrl}}{{apiPath}}/logout
Authorization: {{accessToken}}

### 3-5. 만료된 토큰으로 로그아웃
POST {{baseUrl}}{{apiPath}}/logout
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyMzkwMjJ9.expired

### 3-6. 빈 Bearer 토큰으로 로그아웃
POST {{baseUrl}}{{apiPath}}/logout
Authorization: Bearer

### 3-7. 쿠키의 refreshToken으로 로그아웃
POST {{baseUrl}}{{apiPath}}/logout
Cookie: refreshToken={{refreshToken}}

###############################################################################
### 4. JWT 토큰 갱신 테스트 (Token Refresh Tests)
###############################################################################

### 4-1. 정상적인 토큰 갱신 (쿠키에 리프레시 토큰)
# 실제 사용시 login 응답의 쿠키에서 받은 refreshToken을 사용하세요
POST {{baseUrl}}{{apiPath}}/refresh
Cookie: refreshToken={{refreshToken}}

### 4-2. 리프레시 토큰 없이 갱신 시도
POST {{baseUrl}}{{apiPath}}/refresh

### 4-3. 만료된 리프레시 토큰으로 갱신
POST {{baseUrl}}{{apiPath}}/refresh
Cookie: refreshToken=expired-refresh-token

### 4-4. 잘못된 형식의 리프레시 토큰
POST {{baseUrl}}{{apiPath}}/refresh
Cookie: refreshToken=invalid-jwt-format

### 4-5. Authorization 헤더와 쿠키 모두 있는 경우
POST {{baseUrl}}{{apiPath}}/refresh
Authorization: Bearer {{accessToken}}
Cookie: refreshToken={{refreshToken}}

### 4-6. 취소된(revoked) 리프레시 토큰으로 갱신
POST {{baseUrl}}{{apiPath}}/refresh
Cookie: refreshToken={{revokedRefreshToken}}

###############################################################################
### 5. 전체 기기 로그아웃 테스트 (Logout All Devices Tests)
###############################################################################

### 5-1. 정상적인 전체 기기 로그아웃
# 실제 사용시 login 응답에서 받은 accessToken을 사용하세요
POST {{baseUrl}}{{apiPath}}/logout-all
Authorization: Bearer {{accessToken}}

### 5-2. Authorization 헤더 없이 전체 기기 로그아웃
POST {{baseUrl}}{{apiPath}}/logout-all

### 5-3. Bearer 키워드 없는 토큰으로 전체 기기 로그아웃
POST {{baseUrl}}{{apiPath}}/logout-all
Authorization: {{accessToken}}

### 5-4. 잘못된 형식의 Authorization 헤더
POST {{baseUrl}}{{apiPath}}/logout-all
Authorization: Basic dXNlcjpwYXNzd29yZA==

### 5-5. 빈 Bearer 토큰으로 전체 기기 로그아웃
POST {{baseUrl}}{{apiPath}}/logout-all
Authorization: Bearer

### 5-6. 만료된 액세스 토큰으로 전체 기기 로그아웃
POST {{baseUrl}}{{apiPath}}/logout-all
Authorization: Bearer expired-access-token

### 5-7. 블랙리스트에 있는 토큰으로 전체 기기 로그아웃
POST {{baseUrl}}{{apiPath}}/logout-all
Authorization: Bearer {{blacklistedToken}}

###############################################################################
### 6. JWT 통합 시나리오 테스트 (JWT Integration Scenarios)
###############################################################################

### 6-1. 시나리오: 회원가입 → 로그인 → 로그아웃
# Step 1: 회원가입
POST {{baseUrl}}{{apiPath}}/signup
Content-Type: application/json

{
  "email": "jwt-test@example.com",
  "password": "JwtTest123!",
  "memberName": "JWT테스트사용자",
  "handle": "jwtuser",
  "birthDate": "1990-01-01",
  "gender": "FEMALE",
  "countryCode": "KR"
}

### Step 2: 로그인 (accessToken과 refreshToken을 받음)
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "email": "jwt-test@example.com",
  "password": "JwtTest123!"
}

### Step 3: 로그아웃 (accessToken 사용)
POST {{baseUrl}}{{apiPath}}/logout
Authorization: Bearer {{accessToken}}

###############################################################################
### 7. 토큰 갱신 시나리오 테스트 (Token Refresh Scenarios)
###############################################################################

### 7-1. 로그인 → 토큰 갱신 → 새 토큰으로 로그아웃
# Step 1: 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "Password123!"
}

### Step 2: 토큰 갱신 (새로운 accessToken 받음)
POST {{baseUrl}}{{apiPath}}/refresh
Cookie: refreshToken={{refreshToken}}

### Step 3: 새 토큰으로 전체 기기 로그아웃
POST {{baseUrl}}{{apiPath}}/logout-all
Authorization: Bearer {{newAccessToken}}

###############################################################################
### 8. 다중 세션 시나리오 테스트 (Multiple Session Tests)
###############################################################################

### 8-1. 다중 기기 로그인 후 전체 로그아웃
# Device 1: 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json
X-Device-Info: iPhone 13
X-Forwarded-For: 192.168.1.100

{
  "email": "multi@example.com",
  "password": "Multi123!"
}

### Device 2: 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json
X-Device-Info: iPad Pro
X-Forwarded-For: 192.168.1.101

{
  "email": "multi@example.com",
  "password": "Multi123!"
}

### Device 3: 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json
X-Device-Info: MacBook Pro
X-Forwarded-For: 192.168.1.102

{
  "email": "multi@example.com",
  "password": "Multi123!"
}

### 전체 기기에서 로그아웃 (Device 1의 토큰 사용)
POST {{baseUrl}}{{apiPath}}/logout-all
Authorization: Bearer {{device1AccessToken}}

### Device 2의 토큰으로 접근 시도 (실패해야 함)
GET {{baseUrl}}/api/protected-resource
Authorization: Bearer {{device2AccessToken}}

###############################################################################
### 9. 블랙리스트 토큰 시나리오 (Blacklist Token Scenarios)
###############################################################################

### 9-1. 토큰 블랙리스트 처리
# Step 1: 정상 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "email": "blacklist@example.com",
  "password": "Blacklist123!"
}

### Step 2: 로그아웃 (토큰이 블랙리스트에 추가됨)
POST {{baseUrl}}{{apiPath}}/logout
Authorization: Bearer {{accessToken}}

### Step 3: 블랙리스트된 토큰으로 접근 시도 (실패해야 함)
GET {{baseUrl}}/api/member/profile
Authorization: Bearer {{accessToken}}

### Step 4: 블랙리스트된 토큰으로 로그아웃 시도 (실패해야 함)
POST {{baseUrl}}{{apiPath}}/logout
Authorization: Bearer {{accessToken}}

###############################################################################
### 10. 에러 복구 시나리오 (Error Recovery Scenarios)
###############################################################################

### 10-1. 토큰 만료 후 갱신 시나리오
# Step 1: 만료된 액세스 토큰으로 API 호출 (401 응답)
GET {{baseUrl}}/api/member/profile
Authorization: Bearer {{expiredAccessToken}}

### Step 2: 리프레시 토큰으로 새 액세스 토큰 획득
POST {{baseUrl}}{{apiPath}}/refresh
Cookie: refreshToken={{validRefreshToken}}

### Step 3: 새 액세스 토큰으로 API 재호출 (성공)
GET {{baseUrl}}/api/member/profile
Authorization: Bearer {{newAccessToken}}

### 10-2. 리프레시 토큰도 만료된 경우
# Step 1: 만료된 리프레시 토큰으로 갱신 시도 (실패)
POST {{baseUrl}}{{apiPath}}/refresh
Cookie: refreshToken={{expiredRefreshToken}}

### Step 2: 다시 로그인 필요
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "Password123!"
}