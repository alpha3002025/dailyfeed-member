### Authentication Controller E2E Tests
### Base URL and Environment Variables
@baseUrl = {{baseUrl}}
@apiPath = /api/authentication

###############################################################################
### 1. 회원가입 테스트 (Signup Tests)
###############################################################################

### 1-1. 정상 회원가입
POST {{baseUrl}}{{apiPath}}/signup
Content-Type: application/json

{
  "email": "case1@example.com",
  "password": "Password123!",
  "memberName": "테스트 사용자",
  "handle": "testuser123",
  "displayName": "Test User",
  "bio": "안녕하세요, 테스트 사용자입니다.",
  "location": "Seoul, Korea",
  "websiteUrl": "https://example.com",
  "birthDate": "1990-01-01",
  "gender": "MALE",
  "timezone": "Asia/Seoul",
  "languageCode": "ko",
  "countryCode": "KR",
  "privacyLevel": "PUBLIC",
  "isActive": true,
  "avatarUrl": "https://example.com/avatar.jpg",
  "coverUrl": "https://example.com/cover.jpg"
}


###############################################################################
### 2. 로그인 테스트 (Login Tests)
###############################################################################

### 2-1. 정상 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "email": "case1@example.com",
  "password": "Password123!"
}

> {%
// 디버깅을 위한 응답 정보 출력
client.log("=== Login Response Debug ===");
client.log("Response Status: " + response.status);
client.log("Response Content-Type: " + response.contentType.mimeType);

// 주요 응답 헤더 확인
client.log("=== Response Headers Check ===");
var authHeader = response.headers.valueOf("Authorization");
var contentType = response.headers.valueOf("Content-Type");
var setCookie = response.headers.valueOf("Set-Cookie");

client.log("Authorization header: " + authHeader);
client.log("Content-Type header: " + contentType);
client.log("Set-Cookie header: " + setCookie);

// 응답 바디 확인
client.log("=== Response Body ===");
try {
    if (response.body) {
        client.log("Response body type: " + typeof response.body);
        client.log("Response body: " + JSON.stringify(response.body, null, 2));

        // 응답 바디에서 토큰 확인
        if (response.body.accessToken) {
            client.log("=== Found accessToken in response body ===");
            var token = response.body.accessToken;

            // 글로벌 변수에 토큰 저장
            client.global.set("accessToken", token);

            client.log("Access Token saved from body successfully");
            client.log("Token (first 30 chars): " + token.substring(0, 30) + "...");
            client.log("Token length: " + token.length);
        } else if (response.body.data && response.body.data.accessToken) {
            client.log("=== Found accessToken in response.body.data ===");
            var token = response.body.data.accessToken;

            // 글로벌 변수에 토큰 저장
            client.global.set("accessToken", token);

            client.log("Access Token saved from body.data successfully");
            client.log("Token (first 30 chars): " + token.substring(0, 30) + "...");
            client.log("Token length: " + token.length);
        } else {
            client.log("No accessToken found in response body");
            client.log("Available fields in response.body: " + Object.keys(response.body).join(", "));
        }
    } else {
        client.log("Response body is empty or null");
    }
} catch (e) {
    client.log("Error parsing response body: " + e.message);
}

// Authorization 헤더에서 토큰 확인
if (authHeader) {
    client.log("=== Found Authorization header ===");
    client.log("Authorization header value: " + authHeader);

    // "Bearer " 접두사 제거
    var headerToken = authHeader.replace("Bearer ", "");

    // 글로벌 변수에 토큰 저장
    client.global.set("accessToken", headerToken);

    client.log("Access Token saved from header successfully");
    client.log("Token (first 30 chars): " + headerToken.substring(0, 30) + "...");
} else {
    client.log("=== No Authorization header found ===");
}

// 테스트
client.test("Login successful", function() {
    client.assert(response.status === 200, "Response status is 200");
});

client.test("Token received", function() {
    var hasToken = (response.body && (response.body.accessToken || (response.body.data && response.body.data.accessToken))) ||
                   response.headers.valueOf("Authorization");
    client.assert(hasToken, "Token received in response");
});
%}


###############################################################################
### 3. JWT 기반 로그아웃 테스트 (JWT Logout Tests)
###############################################################################
### 3-1. 현재 디바이스에서 로그아웃 (accessToken 자동 사용)
# 로그인 후 받은 JWT 토큰을 사용합니다.
# 먼저 2-1 로그인을 실행한 후 이 요청을 실행하세요.
POST {{baseUrl}}{{apiPath}}/logout
Authorization: Bearer {{accessToken}}

### 3-2. 모든 디바이스에서 로그아웃
# 모든 디바이스의 토큰을 무효화합니다.
POST {{baseUrl}}{{apiPath}}/logout-all
Authorization: Bearer {{accessToken}}

