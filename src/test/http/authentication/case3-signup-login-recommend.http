### Authentication Controller E2E Tests
### Base URL and Environment Variables
@baseUrl = {{baseUrl}}
@apiPath = /api/authentication

###############################################################################
### 1. 회원가입 테스트 (Signup Tests)
###############################################################################

### 1-1. 정상 회원가입
POST {{baseUrl}}{{apiPath}}/signup
Content-Type: application/json

{
  "email": "case3-signup-login-recommend@example.com",
  "password": "Password123!",
  "memberName": "case3-signup-login-recommend",
  "handle": "case3_signup_login_recommend",
  "displayName": "case3-signup-login-recommend",
  "bio": "안녕하세요, 테스트 사용자입니다.",
  "location": "Seoul, Korea",
  "websiteUrl": "https://example.com",
  "birthDate": "1990-01-01",
  "gender": "MALE",
  "timezone": "Asia/Seoul",
  "languageCode": "ko",
  "countryCode": "KR",
  "privacyLevel": "PUBLIC",
  "isActive": true,
  "avatarUrl": "https://example.com/avatar.jpg",
  "coverUrl": "https://example.com/cover.jpg"
}


###############################################################################
### 2. 로그인 테스트 (Login Tests)
###############################################################################

### 2-1. 정상 로그인
POST {{baseUrl}}{{apiPath}}/login
Content-Type: application/json

{
  "email": "case3-signup-login-recommend@example.com",
  "password": "Password123!"
}

> {%
// 로그인 응답 확인
client.log("Login Response Status: " + response.status);

// 토큰 저장
try {
    var token = null;

    // Authorization 헤더에서 토큰 확인 (메인 소스)
    var authHeader = response.headers.valueOf("Authorization");
    if (authHeader && authHeader.startsWith("Bearer ")) {
        token = authHeader.substring(7);
        client.log("✓ Found token in Authorization header");
    }

    // 토큰 저장
    if (token) {
        client.global.set("accessToken", token);
        client.log("✓ Access Token saved: " + token);

        // 디버깅: 저장된 토큰 확인
        var savedToken = client.global.get("accessToken");
        client.log("✓ Verified saved token: " + (savedToken ? "OK" : "Failed"));
    } else {
        client.log("✗ No access token found in Authorization header");

        // 모든 헤더 출력 (디버깅용)
        client.log("Available headers: " + response.headers.valuesOf().join(", "));
    }

    // 응답 상태 확인
    if (response.body) {
        client.log("Login status: ok=" + response.body.ok + ", reason=" + response.body.reason);
    }
} catch (e) {
    client.log("Error: " + e.message);
}

// 테스트
client.test("Login successful", function() {
    client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.ok === "Y", "Login OK status is Y");
});

client.test("Token received", function() {
    var savedToken = client.global.get("accessToken");
    client.assert(savedToken !== null && savedToken !== undefined, "Token received and saved");
});
%}


###############################################################################
### 3. 최신 멤버 추천
###############################################################################
@path3 = /api/members/follow

### 테스트 3.1
GET {{baseUrl}}{{path3}}/recommend/newbie
Authorization: Bearer {{accessToken}}


###############################################################################
### 4. 팔로우
###############################################################################
@path4 = /api/members/follow

### 테스트 4.1
POST {{baseUrl}}{{path4}}
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "memberIdToFollow": 4
}

### 테스트 4.2
DELETE {{baseUrl}}{{path4}}
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "memberIdToUnfollow": 4
}


###############################################################################
### 5. 팔로잉 중인 회원 조회
###############################################################################
@path5 = /api/members/followers-followings

### 테스트 5.1
GET {{baseUrl}}{{path5}}
Authorization: Bearer {{accessToken}}


